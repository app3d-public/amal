#!/usr/bin/env python3
import os

from jinja2 import Template

COMP_NAMES = ["x", "y", "z", "w"]

def gen_pairwise_impl(c1: int, r1: int, c2: int):
    lines = []
    lines.append("auto " + ", ".join([f"b{i} = m2[{i}]" for i in range(c2)]) + ";")
    lines.append("")
    lines.append(f"AMAL_NVEC({r1}) " + ", ".join([f"c{i}" for i in range(c2)]) + ";")
    lines.append("")

    for j in range(c2):
        comp0 = COMP_NAMES[0]
        lines.append(f"c{j} = m1[0] * amal::splat_{comp0}(b{j});")
        for i in range(1, c1):
            comp = COMP_NAMES[i]
            lines.append(f"c{j} = amal::fma(m1[{i}], amal::splat_{comp}(b{j}), c{j});")
        lines.append("")

    # записываем в out
    lines.append(" ".join([f"out[{i}] = c{i};" for i in range(c2)]))
    return lines

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    template_path = os.path.join(script_dir, "templates/matrix_multiply.tpp.j2")
    with open(template_path, "r", encoding="utf-8") as f:
        template = Template(f.read())

    print("// Generated by matrix_multiply_fma.py\n")
    for c1 in range(2, 5):
        for r1 in range(2, 5):
            for c2 in range(2, 5):
                if r1 != c2:
                    continue
                impl = gen_pairwise_impl(c1, r1, c2)
                print(template.render(
                    C1=c1, R1=r1, C2=c2, R2=c1,
                    type=f"AMAL_NVEC({r1})",
                    implementation=impl
                ))

if __name__ == "__main__":
    main()
