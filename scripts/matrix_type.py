#!/usr/bin/env python3
import os
import sys

from jinja2 import Template

swizzle = ['x', 'y', 'z', 'w']

def format_column(col, src_c, src_r, dst_r):
    if col < src_c:
        if src_r == dst_r:
            return f"column_type(m.data[{col}])"
        if src_r < dst_r:
            pads = ["1" if row == col else "0" for row in range(src_r, dst_r)]
            return f"column_type(m.data[{col}], {', '.join(pads)})"
        return f"column_type(m.data[{col}])"
    
    elems = ["1" if row == col else "0" for row in range(dst_r)]
    if all(e == "0" for e in elems):
        return "column_type(0)"
    return f"column_type({', '.join(elems)})"

def make_matrix_conversion_map(dst_c, dst_r):
    result = {}
    for src_c in range(2, 5):
        for src_r in range(2, 5):
            if (src_c, src_r) == (dst_c, dst_r):
                result[(src_c, src_r)] = [f"m.data[{i}]" for i in range(dst_c)]
                continue

            columns = []
            for col in range(dst_c):
                columns.append(format_column(col, src_c, src_r, dst_r))
            result[(src_c, src_r)] = columns
    return result

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 matrix_type.py <columns> <rows>")
        sys.exit(1)
    C = int(sys.argv[1])
    R = int(sys.argv[2])
    script_dir = os.path.dirname(os.path.abspath(__file__))
    template_path = os.path.join(script_dir, "templates/matrix.tpp.j2")
    with open(template_path) as f:
        template = Template(f.read())
    print("// Generated by matrix_type.py\n")

    keys = {
        "C": C,
        "R": R,
        "conversion_map": make_matrix_conversion_map(C, R)
    }
    print(template.render(**keys))


if __name__ == "__main__":
    main()
